class Solution {

    /**
     * @param Integer[][] $image
     * @param Integer $sr
     * @param Integer $sc
     * @param Integer $newColor
     * @return Integer[][]
     */
    function floodFill($image, $sr, $sc, $newColor)
     {
        $rows = count($image);
        $cols = count($image[0]);
        $originalColor = $image[$sr][$sc];

           if ($originalColor ==$newColor)
         {
            return $image;
        }
        $this->dfs($image, $sr, $sc, $rows, $cols, $originalColor, $newColor);
        
        return $image;
    }
    
    function dfs(&$image, $r, $c, $rows, $cols, $originalColor, $newColor)
     {
        if ($r < 0 || $r >= $rows || $c < 0 || $c >= $cols || $image[$r][$c] != $originalColor)
         {
            return;
        }
        $image[$r][$c] = $newColor;
        $this->dfs($image, $r + 1, $c, $rows, $cols, $originalColor, $newColor); // Down
        $this->dfs($image, $r - 1, $c, $rows, $cols, $originalColor, $newColor); // Up
        $this->dfs($image, $r, $c + 1, $rows, $cols, $originalColor, $newColor); // Right
        $this->dfs($image, $r, $c - 1, $rows, $cols, $originalColor, $newColor); // Left
    }
}
